<?php

namespace App\Entity\Disease;

use App\Entity\Core\Site;
use App\Entity\Traits\IdentifierAutogeneratedTrait;
use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints as Assert;

/**
 * Class DiseaseSite.
 *
 * @ORM\Entity(repositoryClass="App\Repository\Disease\DiseaseSiteRepository")
 * @ORM\Table(
 *  uniqueConstraints={
 *		@ORM\UniqueConstraint(name="disease_site_udx", columns={"FK_diseaseId", "FK_siteId"}),
 *	})
 */
class DiseaseSite
{
    use IdentifierAutogeneratedTrait;

    /**
     * @ORM\ManyToOne(targetEntity="Disease", inversedBy="diseaseSites")
     * @ORM\JoinColumn(name="FK_diseaseId", referencedColumnName="id", nullable=false)
     * @Assert\NotNull()
     */
    private Disease $disease;

    /**
     * @ORM\ManyToOne(targetEntity="App\Entity\Core\Site", inversedBy="diseaseSites")
     * @ORM\JoinColumn(name="FK_siteId", referencedColumnName="id", nullable=false)
     * @Assert\NotNull()
     */
    private Site $site;

    /**
     * Routine -> false
     * Outbreak -> true.
     *
     * @ORM\Column(type="boolean", nullable=false)
     */
    private bool $outbreak = false;

    /**
     * not active -> false
     * active -> true.
     *
     * @ORM\Column(type="boolean", nullable=false)
     */
    private bool $active = false;

    /**
     * inherited -> false
     * forced -> true.
     *
     * @ORM\Column(type="boolean", nullable=false)
     */
    private bool $forced = false;

    /**
     * no child with this disease in outbreak -> false
     * if a least a child has this disease in outbreak -> true.
     *
     * @ORM\Column(type="boolean", nullable=false)
     */
    private bool $outbreakInherited = false;

    public function getDisease(): Disease
    {
        return $this->disease;
    }

    public function setDisease(Disease $disease): void
    {
        $this->disease = $disease;
    }

    public function getSite(): Site
    {
        return $this->site;
    }

    public function setSite(Site $site): void
    {
        $this->site = $site;
    }

    public function isOutbreak(): bool
    {
        return $this->outbreak;
    }

    public function setOutbreak(bool $outbreak): void
    {
        $this->outbreak = $outbreak;
    }

    public function isActive(): bool
    {
        return $this->active;
    }

    public function setActive(bool $active): void
    {
        $this->active = $active;
    }

    public function isForced(): bool
    {
        return $this->forced;
    }

    public function setForced(bool $forced): void
    {
        $this->forced = $forced;
    }

    public function setInherited(bool $inherited)
    {
        $this->setForced(!$inherited);
    }

    public function isInherited(): bool
    {
        return !$this->isForced();
    }

    public function isOutbreakInherited(): bool
    {
        return $this->outbreakInherited;
    }

    public function setOutbreakInherited(bool $outbreakInherited): void
    {
        $this->outbreakInherited = $outbreakInherited;
    }

    public function getConfiguration(bool $checkForced = false): string
    {
        $mobileCode = $this->getDisease()->getMobileCode();
        if ($this->isOutbreak()) {
            if (!$checkForced || $this->isForced()) {
                return $mobileCode.'2';
            }
        }

        if ($this->isActive()) {
            if (!$checkForced || $this->isForced()) {
                return $mobileCode.'1';
            }
        }

        return $mobileCode.'0';
    }

    public function __clone()
    {
        $this->id = null;
    }
}
