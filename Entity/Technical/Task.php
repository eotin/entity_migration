<?php

namespace App\Entity\Technical;

use App\Entity\Security\User;
use App\Entity\Traits\IdentifierAutogeneratedTrait;
use Doctrine\ORM\Mapping as ORM;
use Gedmo\Timestampable\Traits\TimestampableEntity;

/**
 * @ORM\Entity(repositoryClass="App\Repository\Technical\TaskRepository")
 * @ORM\Table(
 *      indexes={
 *          @ORM\Index(columns={"FK_userId", "type", "status"})
 *      }
 * )
 */
class Task
{
    use TimestampableEntity;
    use IdentifierAutogeneratedTrait;

    public const STATUS_QUEUED = 'QUEUED';
    public const STATUS_IN_PROGRESS = 'IN_PROGRESS';
    public const STATUS_FINISHED = 'FINISHED';
    public const STATUS_ERROR = 'ERROR';

    /**
     * @ORM\ManyToOne(targetEntity="App\Entity\Security\User", inversedBy="tasks")
     * @ORM\JoinColumn(name="FK_userId", referencedColumnName="id")
     */
    private User $user;

    /**
     * @ORM\Column(type="string")
     */
    private string $name;

    /**
     * @ORM\Column(type="string")
     */
    private string $type;

    /**
     * @ORM\Column(type="string")
     */
    private string $category;

    /**
     * @ORM\Column(type="string")
     */
    private string $status;

    /**
     * @var ?array
     * @ORM\Column(type="json", nullable=true)
     */
    private ?array $parameters;

    /**
     * @var ?string
     * @ORM\Column(type="text", nullable=true)
     */
    private ?string $comments;

    public function getUser(): User
    {
        return $this->user;
    }

    public function setUser(User $user): void
    {
        $this->user = $user;
    }

    public function getName(): string
    {
        return $this->name;
    }

    public function setName(string $name): void
    {
        $this->name = $name;
    }

    public function getType(): string
    {
        return $this->type;
    }

    public function setType(string $type): void
    {
        $this->type = $type;
    }

    public function getCategory(): string
    {
        return $this->category;
    }

    public function setCategory(string $category): void
    {
        $this->category = $category;
    }

    public function getStatus(): string
    {
        return $this->status;
    }

    public function setStatus(string $status): void
    {
        $this->status = $status;
    }

    /**
     * @return ?array
     */
    public function getParameters(): ?array
    {
        return $this->parameters;
    }

    public function setParameters(array $parameters): void
    {
        $this->parameters = $parameters;
    }

    /**
     * @return string
     */
    public function getComments(): ?string
    {
        return $this->comments;
    }

    /**
     * @param ?string $comments
     */
    public function setComments(?string $comments): void
    {
        $this->comments = $comments;
    }

    /**
     * @param $comment
     * @param bool $appendDate
     */
    public function addComment($comment, $appendDate = true): void
    {
        $separator = '';

        if (!empty($this->note)) {
            $separator = "\r\n";
        }

        if ($appendDate) {
            $comment = sprintf('%s - %s', date('Y-m-d H:i:s'), $comment);
        }

        $this->comments .= ($separator.$comment);
    }
}
