<?php

namespace App\Entity\Core;

use App\Entity\ContactInterface;
use App\Entity\Traits\IdentifierAutogeneratedTrait;
use Doctrine\ORM\Mapping as ORM;
use Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity;
use Symfony\Component\Validator\Constraints as Assert;

/**
 * Class Contact.
 *
 * @ORM\InheritanceType("TABLE_PER_CLASS")
 *
 * @UniqueEntity(fields="phoneNumber", message="This phone number already exists")
 * @UniqueEntity(fields="reference", message="This reference already exists")
 */
abstract class Contact implements ContactInterface
{
    use IdentifierAutogeneratedTrait;

    /**
     * @ORM\Column(type="string", unique=true)
     * @Assert\Regex(
     *     pattern="/^[+]\d+$/",
     *     message="phone"
     * )
     */
    protected string $phoneNumber = '+';

    /**
     * @ORM\Column(type="string", unique=true)
     */
    protected string $reference = '';

    /**
     * @ORM\Column(type="string", nullable=true)
     */
    protected ?string $name = null;

    /**
     * @ORM\Column(type="string", nullable=true)
     */
    protected ?string $email = null;

    /**
     * @ORM\Column(type="string", nullable=true)
     */
    protected ?string $note = null;

    /**
     * @ORM\Column(type="boolean", nullable=true)
     */
    protected ?bool $enabled = false;

    /**
     * @ORM\Column(type="float", precision=11, scale=8, nullable=true)
     * @Assert\LessThanOrEqual(value=180.0)
     * @Assert\GreaterThanOrEqual(value=-180.0)
     */
    protected ?float $longitude = null;

    /**
     * @ORM\Column(type="float", precision=10, scale=8, nullable=true)
     * @Assert\LessThanOrEqual(value=90.0)
     * @Assert\GreaterThanOrEqual(value=-90.0)
     */
    protected ?float $latitude = null;

    /**
     * @ORM\Column(type="string", nullable=true)
     */
    protected ?string $preferredGateway = null;

    public function getPhoneNumber(): string
    {
        return $this->phoneNumber;
    }

    public function setPhoneNumber(string $phoneNumber): void
    {
        $this->phoneNumber = $phoneNumber;
    }

    public function getReference(): string
    {
        return $this->reference;
    }

    public function setReference(string $reference): void
    {
        $this->reference = $reference;
    }

    public function getName(): ?string
    {
        return $this->name;
    }

    public function setName(?string $name): void
    {
        $this->name = $name;
    }

    public function getEmail(): ?string
    {
        return $this->email;
    }

    public function setEmail(?string $email): void
    {
        $this->email = $email;
    }

    public function getNote(): ?string
    {
        return $this->note;
    }

    public function setNote(?string $note): void
    {
        $this->note = $note;
    }

    public function getEnabled(): ?bool
    {
        return $this->enabled;
    }

    public function setEnabled(?bool $enabled): void
    {
        $this->enabled = $enabled;
    }

    public function getLongitude(): ?float
    {
        return $this->longitude;
    }

    public function setLongitude(?float $longitude): void
    {
        $this->longitude = $longitude;
    }

    public function getLatitude(): ?float
    {
        return $this->latitude;
    }

    public function setLatitude(?float $latitude): void
    {
        $this->latitude = $latitude;
    }

    public function getPreferredGateway(): ?string
    {
        return $this->preferredGateway;
    }

    public function setPreferredGateway(?string $preferredGateway): void
    {
        $this->preferredGateway = $preferredGateway;
    }

    public function getLastUsedGateway(): ?string
    {
        return null;
    }

    public function setLastUsedGateway(?string $lastUsedGateway): void
    {
    }

    public function __toString(): string
    {
        return $this->getName().' ('.$this->getPhoneNumber().')';
    }
}
