<?php

namespace App\Entity\Investigation;

use App\Entity\JsonUpdatableInterface;
use App\Entity\SoftDeletableInterface;
use App\Entity\Traits\IdentifierAutogeneratedTrait;
use Doctrine\ORM\Mapping as ORM;
use Gedmo\Blameable\Traits\BlameableEntity;
use Gedmo\Timestampable\Traits\TimestampableEntity;

/**
 * Property prefixed with 'ext' means external.
 *
 * @ORM\Entity(repositoryClass="App\Repository\Investigation\InvestigationRepository")
 * @ORM\Table(
 *   name="investigation",
 *	 indexes={
 *      @ORM\Index(columns={"configuration_id"}),
 *      @ORM\Index(columns={"ext_UUID"}),
 *      @ORM\Index(columns={"ext_id"}),
 *      @ORM\Index(columns={"identifier"}),
 *      @ORM\Index(columns={"site_id"}),
 *      @ORM\Index(columns={"disease_id"}),
 *      @ORM\Index(columns={"investigation_date"}),
 *      @ORM\Index(columns={"disease_confirmed"}),
 *      @ORM\Index(columns={"submission_time"}),
 *      @ORM\Index(columns={"today"}),
 *      @ORM\Index(columns={"week_calendar_id"}),
 *      @ORM\Index(columns={"day_calendar_id"}),
 *  })
 */
class Investigation implements JsonUpdatableInterface, SoftDeletableInterface, InvestigationInterface
{
    use IdentifierAutogeneratedTrait;
    use TimestampableEntity;
    use BlameableEntity;
    // Investigation
    public const INVESTIGATION_ID = 'inv.id';
    public const INVESTIGATION_RSID = 'inv.identifier';
    public const INVESTIGATION_ORIGINAL_ID = 'inv.originalInvestigationId';
    public const INVESTIGATION_DISEASE_CONFIRMED = 'inv.diseaseConfirmed';
    public const INVESTIGATION_DISEASEID = 'inv.diseaseId';
    public const INVESTIGATION_DELETED = 'inv.deleted';
    public const INVESTIGATION_UPDATED_BY = 'inv.updatedBy';
    public const INVESTIGATION_UPDATED_AT = 'inv.updatedAt';
    public const INVESTIGATION_SUBMISSION_ID = 'inv.submissionId';

    // Disease info linked to the investigation
    public const INVESTIGATION_DISEASE_ID = 'dinv.id';
    public const INVESTIGATION_DISEASE_NAME = 'dinv.name';

    /**
     * @ORM\Column(type="integer")
     */
    protected int $configurationId;

    /**
     * @ORM\Column(type="string")
     */
    protected string $extUUID;

    /**
     * @ORM\Column(type="integer")
     */
    protected int $extId;

    /**
     * Need to be public to be updatable.
     *
     * @ORM\Column(type="string")
     */
    public string $identifier;

    /**
     * @ORM\Column(type="integer", nullable=true)
     */
    private ?int $siteId;

    /**
     * @ORM\Column(type="integer", nullable=true)
     */
    private ?int $diseaseId;

    /**
     * @var ?int
     * @ORM\Column(type="integer", nullable=true)
     */
    private ?int $originalInvestigationId = null;

    /**
     * @var ?int
     * @ORM\Column(type="integer", nullable=true)
     */
    private ?int $submissionId = null;

    /**
     * @var ?\DateTime
     * @ORM\Column(type="datetime", nullable=true)
     */
    private ?\DateTime $investigationDate = null;

    /**
     * Need to be public to be updatable.
     *
     * @var ?bool
     * @ORM\Column(type="boolean", nullable=true)
     */
    public ?bool $diseaseConfirmed = false;

    /**
     * Need to be public to be updatable.
     *
     * @var ?int
     * @ORM\Column(type="integer", nullable=true)
     */
    public ?int $turnaround;

    /**
     * @ORM\Column(type="boolean")
     */
    private bool $valid = false;

    /**
     * @ORM\Column(type="boolean")
     */
    private bool $extEdited = false;

    /**
     * @var ?\DateTime
     * @ORM\Column(type="datetime", nullable=true)
     */
    private ?\DateTime $extLastEditedDate = null;

    /**
     * @var ?int
     * @ORM\Column(type="integer", nullable=true)
     */
    private ?int $extLastEditedMicroSeconds = null;

    /**
     * @var ?\DateTime
     * @ORM\Column(type="datetime", nullable=true)
     */
    private ?\DateTime $submissionTime = null;

    /**
     * @var ?\DateTime
     * @ORM\Column(type="datetime", nullable=true)
     */
    private ?\DateTime $today = null;

    /**
     * @ORM\Column(type="integer")
     */
    private int $weekCalendarId;

    /**
     * @ORM\Column(type="integer")
     */
    private int $dayCalendarId;

    /**
     * @ORM\Column(type="text")
     */
    private string $rawData;

    /**
     * @var ?array
     * @ORM\Column(type="json", nullable=true)
     */
    private ?array $jsonData;

    /**
     * @ORM\Column(type="boolean", nullable=false, options={"default" = false})
     */
    private bool $deleted = false;

    /**
     * @var ?string
     * @ORM\Column(type="text", nullable=true)
     */
    protected ?string $comments = null;

    private bool $alreadyValidated = false;

    public function getConfigurationId(): int
    {
        return $this->configurationId;
    }

    public function setConfigurationId(int $configurationId): void
    {
        $this->configurationId = $configurationId;
    }

    public function getExtUUID(): string
    {
        return $this->extUUID;
    }

    public function setExtUUID(string $extUUID): void
    {
        $this->extUUID = $extUUID;
    }

    public function getExtId(): int
    {
        return $this->extId;
    }

    public function setExtId(int $extId): void
    {
        $this->extId = $extId;
    }

    public function getSiteId(): ?int
    {
        return $this->siteId;
    }

    public function setSiteId(?int $siteId): void
    {
        $this->siteId = $siteId;
    }

    public function getDiseaseId(): ?int
    {
        return $this->diseaseId;
    }

    public function setDiseaseId(?int $diseaseId): void
    {
        $this->diseaseId = $diseaseId;
    }

    public function getIdentifier(): string
    {
        return $this->identifier;
    }

    public function setIdentifier(string $identifier): void
    {
        $this->identifier = $identifier;
    }

    public function getInvestigationDate(): ?\DateTime
    {
        return $this->investigationDate;
    }

    public function setInvestigationDate(?\DateTime $investigationDate): void
    {
        $this->investigationDate = $investigationDate;
    }

    public function isDiseaseConfirmed(): ?bool
    {
        return $this->diseaseConfirmed;
    }

    public function setDiseaseConfirmed(?bool $diseaseConfirmed): void
    {
        $this->diseaseConfirmed = $diseaseConfirmed;
    }

    public function getTurnaround(): ?int
    {
        return $this->turnaround;
    }

    public function setTurnaround(?int $turnaround): void
    {
        $this->turnaround = $turnaround;
    }

    public function isValid(): bool
    {
        return $this->valid;
    }

    public function setValid(bool $valid): void
    {
        $this->valid = $valid;
    }

    public function getSubmissionId(): ?int
    {
        return $this->submissionId;
    }

    public function setSubmissionId(?int $submissionId): void
    {
        $this->submissionId = $submissionId;
    }

    public function isExtEdited(): bool
    {
        return $this->extEdited;
    }

    public function setExtEdited(bool $extEdited): void
    {
        $this->extEdited = $extEdited;
    }

    public function getExtLastEditedDate(): ?\DateTime
    {
        return $this->extLastEditedDate;
    }

    public function setExtLastEditedDate(?\DateTime $extLastEditedDate): void
    {
        $this->extLastEditedDate = $extLastEditedDate;
    }

    public function getExtLastEditedMicroSeconds(): ?int
    {
        return $this->extLastEditedMicroSeconds;
    }

    public function setExtLastEditedMicroSeconds(?int $extLastEditedMicroSeconds): void
    {
        $this->extLastEditedMicroSeconds = $extLastEditedMicroSeconds;
    }

    public function getOriginalInvestigationId(): ?int
    {
        return $this->originalInvestigationId;
    }

    public function setOriginalInvestigationId(?int $originalInvestigationId): void
    {
        $this->originalInvestigationId = $originalInvestigationId;
    }

    public function getSubmissionTime(): ?\DateTime
    {
        return $this->submissionTime;
    }

    public function setSubmissionTime(?\DateTime $submissionTime): void
    {
        $this->submissionTime = $submissionTime;
    }

    public function getToday(): ?\DateTime
    {
        return $this->today;
    }

    public function setToday(?\DateTime $today): void
    {
        $this->today = $today;
    }

    public function getWeekCalendarId(): int
    {
        return $this->weekCalendarId;
    }

    public function setWeekCalendarId(int $weekCalendarId): void
    {
        $this->weekCalendarId = $weekCalendarId;
    }

    public function getDayCalendarId(): int
    {
        return $this->dayCalendarId;
    }

    public function setDayCalendarId(int $dayCalendarId): void
    {
        $this->dayCalendarId = $dayCalendarId;
    }

    public function getRawData(): string
    {
        return $this->rawData;
    }

    public function setRawData(string $rawData): void
    {
        $this->rawData = $rawData;
    }

    /**
     * @return ?array
     */
    public function getJsonData(): ?array
    {
        return $this->jsonData;
    }

    /**
     * @param ?array $jsonData
     */
    public function setJsonData(?array $jsonData): void
    {
        $this->jsonData = $jsonData;
    }

    public function isAlreadyValidated(): bool
    {
        return $this->alreadyValidated;
    }

    public function setAlreadyValidated(bool $alreadyValidated): void
    {
        $this->alreadyValidated = $alreadyValidated;
    }

    public function isDeleted(): bool
    {
        return $this->deleted;
    }

    public function setDeleted(bool $deleted): void
    {
        $this->deleted = $deleted;
    }

    /**
     * @param $comment
     */
    public function addComment($comment): void
    {
        $separator = '';

        if (!empty($this->comments)) {
            $separator = "\r\n";
        }

        $this->comments .= ($separator.$comment);
    }

    public function appendComment($comment): void
    {
        $this->comments .= $comment;
    }

    private ?object $unMatchSubmission = null;

    public function setUnMatchedSubmission($submission): void
    {
        $this->unMatchSubmission = $submission;
    }

    public function getUnMatchedSubmission(): ?object
    {
        return $this->unMatchSubmission;
    }
}
