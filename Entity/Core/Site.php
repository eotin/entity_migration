<?php

namespace App\Entity\Core;

use App\Entity\HistoryInterface;
use App\Entity\Traits\IdentifierAutogeneratedTrait;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Doctrine\ORM\Mapping as ORM;
use Gedmo\Mapping\Annotation as Gedmo;
use Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity;

/**
 * @Gedmo\Tree(type="nested")
 * @ORM\Entity(repositoryClass="App\Repository\Core\SiteRepository")
 * @ORM\Table(uniqueConstraints={
 *        @ORM\UniqueConstraint(name="site_udx", columns={"reference"}),
 *        @ORM\UniqueConstraint(name="site_external_code_udx", columns={"external_code"}),
 *     }
 * )
 * @UniqueEntity(fields="reference", message="This reference already exists.")
 * @UniqueEntity(fields="externalCode", message="This external code already exists.")
 */
class Site implements HistoryInterface
{
    use IdentifierAutogeneratedTrait;

    /**
     * @ORM\Column(type="string", nullable=false)
     */
    private string $name;

    /**
     * @ORM\Column(type="string", nullable=false)
     */
    private string $reference;

    /**
     * @ORM\Column(type="string", nullable=true, unique=true)
     */
    private ?string $externalCode = null;

    /**
     * @ORM\Column(type="boolean", nullable=true)
     */
    protected bool $enabled;

    /**
     * @ORM\Column(type="integer", nullable=true)
     */
    private ?int $weeklyTimelinessMinutes;

    /**
     * @ORM\Column(type="string", nullable=true)
     */
    private ?string $locale;

    /**
     * @ORM\Column(type="string", nullable=true)
     */
    private ?string $timeZone;

    /**
     * @ORM\Column(type="string", nullable=true)
     */
    private ?string $alertPreferredGateway;

    /**
     * @ORM\Column(type="boolean", nullable=true)
     */
    private ?bool $ackWebSubmission = null; // Inherited when null

    /**
     * @ORM\Column(type="boolean", nullable=true)
     */
    private ?bool $ackSmsSubmission = null; // Inherited when null

    /**
     * @Gedmo\TreeLeft
     * @ORM\Column(name="lft", type="integer")
     */
    private int $lft;

    /**
     * @Gedmo\TreeLevel
     * @ORM\Column(name="lvl", type="integer")
     */
    private int $lvl;

    /**
     * @Gedmo\TreeRight
     * @ORM\Column(name="rgt", type="integer")
     */
    private int $rgt;

    /**
     * @Gedmo\TreeRoot
     * @ORM\ManyToOne(targetEntity="Site")
     * @ORM\JoinColumn(name="tree_root", referencedColumnName="id")
     */
    private Site $root;

    /**
     * @Gedmo\TreeParent
     * @ORM\ManyToOne(targetEntity="Site", inversedBy="children")
     * @ORM\JoinColumn(name="parent_id", referencedColumnName="id")
     */
    private ?Site $parent = null;

    /**
     * @ORM\OneToMany(targetEntity="Site", mappedBy="parent")
     * @ORM\OrderBy({"lft" = "ASC"})
     */
    private Collection $children;

    /**
     * @ORM\OneToMany(targetEntity="App\Entity\Security\User", mappedBy="site", cascade={"persist"})
     */
    private Collection $users;

    /**
     * @ORM\OneToMany(targetEntity="App\Entity\AlertRecipient\InvestigatorSiteSubmissionTypeVersion", mappedBy="site", cascade={"persist"})
     */
    protected Collection $investigatorSiteSubmissionTypeVersion;

    /**
     * @ORM\OneToMany(targetEntity="App\Entity\Core\Informant", mappedBy="site", cascade={"persist"})
     */
    private Collection $informants;

    /**
     * @ORM\OneToMany(targetEntity="App\Entity\Core\SiteHistory", mappedBy="site", cascade={"persist"})
     * @ORM\OrderBy({"dateTo" = "DESC"})
     */
    protected Collection $history;

    /**
     * @ORM\OneToMany(targetEntity="App\Entity\Disease\DiseaseSite", mappedBy="site", cascade={"persist"})
     */
    protected Collection $diseaseSites;

    /**
     * @ORM\ManyToMany(targetEntity="App\Entity\Investigation\Configuration\InvestigationConfiguration", mappedBy="sites", cascade={"persist"})
     */
    protected Collection $investigationConfigurations;

    /**
     * @ORM\OneToMany(targetEntity="App\Entity\Gateway\GatewayDevice", mappedBy="site", cascade={"persist"})
     */
    protected Collection $gatewayDevices;

    /**
     * @ORM\OneToMany(targetEntity="App\Entity\Configuration\BatchConfigurationChange", mappedBy="site", cascade={"persist"})
     */
    protected Collection $batchConfigurations;

    public function __construct()
    {
        $this->history = new ArrayCollection();
        $this->informants = new ArrayCollection();
        $this->investigatorSiteSubmissionTypeVersion = new ArrayCollection();
        $this->users = new ArrayCollection();
        $this->children = new ArrayCollection();
        $this->diseaseSites = new ArrayCollection();
        $this->weeklyTimelinessMinutes = null;
        $this->investigationConfigurations = new ArrayCollection();
        $this->gatewayDevices = new ArrayCollection();
        $this->batchConfigurations = new ArrayCollection();

        $this->setEnabled(true);
    }

    public function getName(): string
    {
        return $this->name;
    }

    public function setName(string $name): void
    {
        $this->name = $name;
    }

    public function getReference(): string
    {
        return $this->reference;
    }

    public function setReference(string $reference): void
    {
        $this->reference = $reference;
    }

    public function getExternalCode(): ?string
    {
        return $this->externalCode;
    }

    public function setExternalCode(?string $externalCode): void
    {
        $this->externalCode = $externalCode;
    }

    public function getEnabled(): bool
    {
        return $this->enabled;
    }

    public function setEnabled(bool $enable): void
    {
        $this->enabled = $enable;
    }

    public function getWeeklyTimelinessMinutes(): ?int
    {
        return $this->weeklyTimelinessMinutes;
    }

    public function setWeeklyTimelinessMinutes(?int $weeklyTimelinessMinutes): void
    {
        $this->weeklyTimelinessMinutes = $weeklyTimelinessMinutes;
    }

    public function getLocale(): ?string
    {
        return $this->locale;
    }

    public function setLocale(?string $locale): void
    {
        $this->locale = $locale;
    }

    public function getTimeZone(): ?string
    {
        return $this->timeZone;
    }

    public function setTimeZone(?string $timeZone): void
    {
        $this->timeZone = $timeZone;
    }

    public function getAlertPreferredGateway(): ?string
    {
        return $this->alertPreferredGateway;
    }

    public function setAlertPreferredGateway(?string $alertPreferredGateway): void
    {
        $this->alertPreferredGateway = $alertPreferredGateway;
    }

    public function getAckWebSubmission(): ?bool
    {
        return $this->ackWebSubmission;
    }

    public function setAckWebSubmission(?bool $ackWebSubmission): void
    {
        $this->ackWebSubmission = $ackWebSubmission;
    }

    public function getAckSmsSubmission(): ?bool
    {
        return $this->ackSmsSubmission;
    }

    public function setAckSmsSubmission(?bool $ackSmsSubmission): void
    {
        $this->ackSmsSubmission = $ackSmsSubmission;
    }

    public function getLft(): int
    {
        return $this->lft;
    }

    public function setLft(int $lft): void
    {
        $this->lft = $lft;
    }

    public function getLvl(): int
    {
        return $this->lvl;
    }

    public function setLvl(int $lvl): void
    {
        $this->lvl = $lvl;
    }

    public function getRgt(): int
    {
        return $this->rgt;
    }

    public function setRgt(int $rgt): void
    {
        $this->rgt = $rgt;
    }

    public function getRoot(): Site
    {
        return $this->root;
    }

    public function setRoot(Site $root): void
    {
        $this->root = $root;
    }

    public function getParent(): ?Site
    {
        return $this->parent;
    }

    public function setParent(?Site $parent): void
    {
        $this->parent = $parent;
    }

    public function getChildren(): Collection
    {
        return $this->children;
    }

    public function setChildren(Collection $children): void
    {
        $this->children = $children;
    }

    public function getUsers(): Collection
    {
        return $this->users;
    }

    public function setUsers(Collection $users): void
    {
        $this->users = $users;
    }

    public function getInformants(): Collection
    {
        return $this->informants;
    }

    public function setInformants(Collection $informants): void
    {
        $this->informants = $informants;
    }

    public function getInvestigatorSiteSubmissionTypeVersion(): Collection
    {
        return $this->investigatorSiteSubmissionTypeVersion;
    }

    public function setInvestigatorSiteSubmissionTypeVersion($investigatorSiteSubmissionTypeVersion): void
    {
        $this->investigatorSiteSubmissionTypeVersion = $investigatorSiteSubmissionTypeVersion;
    }

    public function getHistory(): Collection
    {
        return $this->history;
    }

    public function setHistory(Collection $history): void
    {
        $this->history = $history;
    }

    public function getDiseaseSites(): Collection
    {
        return $this->diseaseSites;
    }

    public function setDiseaseSites(Collection $diseases): void
    {
        $this->diseaseSites = $diseases;
    }

    public function getInvestigationConfigurations()
    {
        return $this->investigationConfigurations;
    }

    public function setInvestigationConfigurations($investigationConfigurations): void
    {
        $this->investigationConfigurations = $investigationConfigurations;
    }

    public function getGatewayDevices()
    {
        return $this->gatewayDevices;
    }

    public function setGatewayDevices($gatewayDevices): void
    {
        $this->gatewayDevices = $gatewayDevices;
    }

    public function getBatchConfigurations()
    {
        return $this->batchConfigurations;
    }

    public function setBatchConfigurations($batchConfigurations): void
    {
        $this->batchConfigurations = $batchConfigurations;
    }

    /**
     * Is Site a leaf ?
     */
    public function isLeaf(): bool
    {
        return ($this->rgt - $this->lft) === 1;
    }

    public function __toString(): string
    {
        return $this->getName().' ('.$this->getReference().')';
    }

    /**
     * Used in the Site Controller.
     */
    public function AckWebSubmissionDetails(): ?string
    {
        if ($this->ackWebSubmission === null) {
            return null;
        }

        return (string) $this->ackWebSubmission;
    }

    /**
     * Used in the Site Controller.
     */
    public function AckSmsSubmissionDetails(): ?string
    {
        if ($this->ackSmsSubmission === null) {
            return null;
        }

        return (string) $this->ackSmsSubmission;
    }
}
