<?php

namespace App\Entity\Submission;

use App\Entity\Disease\Disease;
use App\Entity\Traits\IdentifierAutogeneratedTrait;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Doctrine\ORM\Mapping as ORM;
use Gedmo\Timestampable\Traits\TimestampableEntity;

/**
 * Class AndiSubmissionType.
 *
 * @ORM\Entity(repositoryClass="App\Repository\Submission\AndiSubmissionTypeRepository")
 * @ORM\Table(
 *     name="submission_type",
 *     uniqueConstraints={@ORM\UniqueConstraint(name="submission_type_udx", columns={"code"})},
 *     )
 */
class AndiSubmissionType
{
    use IdentifierAutogeneratedTrait;
    use TimestampableEntity;

    /**
     * @ORM\Column(type="string")
     */
    private string $code;

    /**
     * @ORM\Column(type="string")
     */
    private string $name;

    /**
     * @var ?string
     * @ORM\Column(type="string", nullable=true)
     */
    private ?string $description;

    /**
     * @var ?string
     * @ORM\Column(type="string", nullable=true)
     */
    private ?string $smsPrefix;

    /**
     * @var ?string
     * @ORM\Column(type="string", nullable=true)
     */
    private ?string $smsSeparator;

    /**
     * @var ?string
     * @ORM\Column(type="string", nullable=true)
     */
    private ?string $smsIdentifier;

    /**
     * @var ?string
     * @ORM\Column(type="string", nullable=true)
     */
    private ?string $xmlIdentifier;

    /**
     * @var ?boolean
     * @ORM\Column(type="boolean", nullable=true)
     */
    private ?bool $updatable;

    /**
     * @ORM\ManyToOne (targetEntity="App\Entity\Disease\Disease")
     * @ORM\JoinColumn(name="FK_diseaseId", referencedColumnName="id", nullable=true)
     */
    private ?Disease $disease = null;

    /**
     * @var ?AndiSubmissionBusinessType
     * @ORM\ManyToOne (targetEntity="AndiSubmissionBusinessType")
     * @ORM\JoinColumn(name="FK_submissionBusinessTypeId", referencedColumnName="id", nullable=true)
     */
    private ?AndiSubmissionBusinessType $businessType = null;

    /**
     * @var Collection
     * @ORM\OneToMany(targetEntity="AndiSubmissionTypeVersion", mappedBy="submissionType", cascade={"remove", "persist"})
     */
    private $versions;

    /**
     * @ORM\Column(type="string", nullable=true)
     */
    private ?string $notification;

    public function __construct()
    {
        $this->versions = new ArrayCollection();
    }

    public function getCode(): string
    {
        return $this->code;
    }

    public function setCode(string $code): void
    {
        $this->code = $code;
    }

    public function getName(): string
    {
        return $this->name;
    }

    public function setName(string $name): void
    {
        $this->name = $name;
    }

    public function getDescription(): ?string
    {
        return $this->description;
    }

    public function setDescription(?string $description): void
    {
        $this->description = $description;
    }

    public function getSmsPrefix(): ?string
    {
        return $this->smsPrefix;
    }

    public function setSmsPrefix(?string $smsPrefix): void
    {
        $this->smsPrefix = $smsPrefix;
    }

    public function getSmsSeparator(): ?string
    {
        return $this->smsSeparator;
    }

    public function setSmsSeparator(?string $smsSeparator): void
    {
        $this->smsSeparator = $smsSeparator;
    }

    public function getSmsIdentifier(): ?string
    {
        return $this->smsIdentifier;
    }

    public function setSmsIdentifier(?string $smsIdentifier): void
    {
        $this->smsIdentifier = $smsIdentifier;
    }

    public function getXmlIdentifier(): ?string
    {
        return $this->xmlIdentifier;
    }

    public function setXmlIdentifier(?string $xmlIdentifier): void
    {
        $this->xmlIdentifier = $xmlIdentifier;
    }

    public function getDisease(): ?Disease
    {
        return $this->disease;
    }

    public function setDisease(?Disease $disease): void
    {
        $this->disease = $disease;
    }

    public function getVersions(): Collection
    {
        return $this->versions;
    }

    public function setVersions(Collection $versions): void
    {
        $this->versions = $versions;
    }

    public function addVersion(AndiSubmissionTypeVersion $version): void
    {
        $this->versions->add($version);
    }

    public function getBusinessType(): ?AndiSubmissionBusinessType
    {
        return $this->businessType;
    }

    public function setBusinessType(?AndiSubmissionBusinessType $businessType): void
    {
        $this->businessType = $businessType;
    }

    public function getNotification(): ?string
    {
        return $this->notification;
    }

    public function setNotification(?string $notification): void
    {
        $this->notification = $notification;
    }
}
