<?php

namespace App\Entity\Security;

use App\Entity\Core\Site;
use App\Entity\Traits\IdentifierAutogeneratedTrait;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Doctrine\ORM\Mapping as ORM;
use Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity;
use Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface;
use Symfony\Component\Security\Core\User\UserInterface;

/**
 * @ORM\Entity(repositoryClass="App\Repository\Security\UserRepository")
 * @UniqueEntity("email")
 */
class User implements UserInterface, PasswordAuthenticatedUserInterface
{
    use IdentifierAutogeneratedTrait;

    /**
     * @ORM\Column(type="string", nullable=true)
     */
    protected ?string $firstName = null;

    /**
     * @ORM\Column(type="string", nullable=true)
     */
    protected ?string $lastName = null;

    /**
     * @ORM\Column(type="string", nullable=false)
     */
    protected string $provider = '';

    /**
     * @var ?Site
     * @ORM\ManyToOne(targetEntity="App\Entity\Core\Site", inversedBy="users")
     * @ORM\JoinColumn(name="FK_siteId", referencedColumnName="id", nullable=true)
     */
    private ?Site $site = null;

    /**
     * @ORM\Column(type="string", nullable=true)
     */
    private ?string $locale = null;

    /**
     * @ORM\Column(type="string", nullable=false, unique=true)
     */
    private string $email;

    /**
     * @ORM\Column(type="boolean")
     */
    private bool $admin;

    /**
     * @ORM\Column(type="boolean")
     */
    private bool $active;

    /**
     * @ORM\Column(type="datetime", nullable=true)
     */
    private ?\DateTime $lastConnection = null;

    /**
     * @ORM\ManyToMany(targetEntity="Role", inversedBy="users")
     * @ORM\JoinTable(name="users_roles")
     */
    private Collection $applicationRoles;

    /**
     * @var ?string The hashed password
     * @ORM\Column(type="string", nullable=true)
     */
    private ?string $password = null;

    /**
     * @ORM\OneToMany(targetEntity="App\Entity\Technical\Task", mappedBy="user", cascade={"remove", "persist"})
     */
    private Collection $tasks;

    /**
     * This field will not be persisted
     * It is used to store the password in the form
     * @var ?string
     *
     * @App\Constraint\Password\PasswordStrengthConstraint
     */
    protected ?string $plainPassword = null;

    public function __construct()
    {
        $this->applicationRoles = new ArrayCollection();
        $this->tasks = new ArrayCollection();
    }

    /**
     * @return Site
     */
    public function getSite(): ?Site
    {
        return $this->site;
    }

    public function setSite(Site $site): void
    {
        $this->site = $site;
    }

    public function getLocale(): ?string
    {
        return $this->locale;
    }

    public function setLocale(?string $locale): void
    {
        $this->locale = $locale;
    }

    /**
     * @return mixed
     */
    public function getLastName()
    {
        return $this->lastName;
    }

    /**
     * @param mixed $lastName
     */
    public function setLastName($lastName): void
    {
        $this->lastName = $lastName;
    }

    public function getEmail(): ?string
    {
        return $this->email;
    }

    public function setEmail(string $email): self
    {
        $this->email = $email;

        return $this;
    }

    /**
     * Will replace getUserName().
     */
    public function getUserIdentifier(): string
    {
        return $this->email;
    }

    public function getUsername(): string
    {
        return $this->getUserIdentifier();
    }

    public function setUsername(string $username): self
    {
        $this->email = $username;

        return $this;
    }

    /**
     * @see UserInterface
     */
    public function getApplicationRoles(): array
    {
        $roles = [];
        foreach ($this->applicationRoles as $role) {
            $roles[] = $role;
        }

        return $roles;
    }

    public function setApplicationRoles(array $roles): self
    {
        $this->applicationRoles = new ArrayCollection($roles);

        return $this;
    }

    public function addApplicationRole(Role $role): void
    {
        $this->applicationRoles->add($role);
    }

    /**
     * @see UserInterface
     */
    public function getPassword(): ?string
    {
        return $this->password;
    }

    public function setPassword(?string $password): self
    {
        $this->password = $password;

        return $this;
    }

    /**
     * @see UserInterface
     */
    public function getSalt(): ?string
    {
        // not needed when using the "bcrypt" algorithm in security.yaml
        return null;
    }

    /**
     * @see UserInterface
     */
    public function eraseCredentials(): void
    {
        // If you store any temporary, sensitive data on the user, clear it here
        // $this->plainPassword = null;
    }

    public function getFirstName(): ?string
    {
        return $this->firstName;
    }

    public function setFirstName(?string $firstName): self
    {
        $this->firstName = $firstName;

        return $this;
    }

    /**
     * @return mixed
     */
    public function getProvider()
    {
        return $this->provider;
    }

    /**
     * @param mixed $provider
     */
    public function setProvider($provider): void
    {
        $this->provider = $provider;
    }

    /**
     * @return mixed
     */
    public function isAdmin()
    {
        return $this->admin;
    }

    /**
     * @param mixed $admin
     */
    public function setAdmin($admin): void
    {
        $this->admin = $admin;
    }

    /**
     * @return mixed
     */
    public function isActive()
    {
        return $this->active;
    }

    /**
     * @param mixed $active
     */
    public function setActive($active): void
    {
        $this->active = $active;
    }

    /**
     * @return mixed
     */
    public function getLastConnection()
    {
        return $this->lastConnection;
    }

    /**
     * @param mixed $lastConnection
     */
    public function setLastConnection($lastConnection): void
    {
        $this->lastConnection = $lastConnection;
    }

    /**
     * @return string|null
     */
    public function getPlainPassword(): ?string
    {
        return $this->plainPassword;
    }

    /**
     * @param string|null $plainPassword
     */
    public function setPlainPassword(?string $plainPassword): void
    {
        $this->plainPassword = $plainPassword;
    }

    /**
     * @return string
     */
    public function __toString()
    {
        return $this->getUserIdentifier();
    }

    /**
     * Php Roles.
     *
     * @return string[]
     */
    public function getRoles(): array
    {
        // we need to make sure to have at least one role
        $roles[] = 'ROLE_USER';
        // Add Role Admin if user is Admin
        if ($this->isAdmin()) {
            $roles[] = 'ROLE_ADMIN';
        }

        return array_unique($roles);
    }
}
