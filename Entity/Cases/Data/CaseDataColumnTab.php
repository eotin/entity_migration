<?php

namespace App\Entity\Cases\Data;

use App\Entity\Traits\IdentifierAutogeneratedTrait;
use Doctrine\Common\Collections\Collection;
use Doctrine\ORM\Mapping as ORM;

/**
 * @ORM\Entity(repositoryClass="App\Repository\Cases\Data\CaseDataColumnTabRepository")
 */
class CaseDataColumnTab
{
    use IdentifierAutogeneratedTrait;

    /**
     * @ORM\Column(type="string")
     */
    private string $name;

    /**
     * @ORM\Column(type="string")
     */
    private string $code;

    /**
     * @ORM\Column(type="boolean", nullable=true)
     */
    private bool $containsOnlySubmissions = false;

    /**
     * @ORM\Column(type="boolean", nullable=true)
     */
    private bool $containsOnlyInvestigations = false;

    /**
     * @ORM\Column(type="boolean", nullable=false)
     */
    private bool $forEdition = false;

    /**
     * @ORM\Column(type="boolean", nullable=false)
     */
    private bool $selectDistinctRows = false;

    /**
     * @var ?int
     * @ORM\Column(type="integer", nullable=true)
     */
    private ?int $maxSiteLevelFilter;

    /**
     * @ORM\Column(type="boolean", nullable=false)
     */
    private bool $enableDisplayDeletedSubmissionsCheckboxFilter = false;

    /**
     * @ORM\Column(type="boolean", nullable=false)
     */
    private bool $enableDisplayOrphanInvestigationsCheckboxFilter = false;

    /**
     * @ORM\Column(type="boolean", nullable=true)
     */
    private bool $generic = false;

    /**
     * @ORM\Column(type="integer", nullable=false)
     */
    private int $sortOrder;

    /**
     * @ORM\OneToMany(targetEntity="CaseDataColumnGroupTabMembership", mappedBy="caseDataColumnTab")
     */
    private Collection $caseDataColumnGroupTabMemberships;

    /**
     * @return CaseDataColumnGroup[]
     */
    public function getCaseDataColumnGroups(): array
    {
        $groups = [];

        $groupTabMemberships = $this->getCaseDataColumnGroupTabMemberships();
        foreach ($groupTabMemberships as $groupTabMembership) {
            $groups[] = $groupTabMembership->getCaseDataColumnGroup();
        }

        return $groups;
    }

    public function getName(): string
    {
        return $this->name;
    }

    public function setName(string $name): void
    {
        $this->name = $name;
    }

    public function getCode(): string
    {
        return $this->code;
    }

    public function setCode(string $code): void
    {
        $this->code = $code;
    }

    public function isContainsOnlySubmissions(): bool
    {
        return $this->containsOnlySubmissions;
    }

    public function setContainsOnlySubmissions(bool $containsOnlySubmissions): void
    {
        $this->containsOnlySubmissions = $containsOnlySubmissions;
    }

    public function isContainsOnlyInvestigations(): bool
    {
        return $this->containsOnlyInvestigations;
    }

    public function setContainsOnlyInvestigations(bool $containsOnlyInvestigations): void
    {
        $this->containsOnlyInvestigations = $containsOnlyInvestigations;
    }

    public function isForEdition(): bool
    {
        return $this->forEdition;
    }

    public function setForEdition(bool $forEdition): void
    {
        $this->forEdition = $forEdition;
    }

    public function isSelectDistinctRows(): bool
    {
        return $this->selectDistinctRows;
    }

    public function setSelectDistinctRows(bool $selectDistinctRows): void
    {
        $this->selectDistinctRows = $selectDistinctRows;
    }

    public function getMaxSiteLevelFilter(): ?int
    {
        return $this->maxSiteLevelFilter;
    }

    public function setMaxSiteLevelFilter(?int $maxSiteLevelFilter): void
    {
        $this->maxSiteLevelFilter = $maxSiteLevelFilter;
    }

    public function isEnableDisplayDeletedSubmissionsCheckboxFilter(): bool
    {
        return $this->enableDisplayDeletedSubmissionsCheckboxFilter;
    }

    public function setEnableDisplayDeletedSubmissionsCheckboxFilter(bool $enableDisplayDeletedSubmissionsCheckboxFilter): void
    {
        $this->enableDisplayDeletedSubmissionsCheckboxFilter = $enableDisplayDeletedSubmissionsCheckboxFilter;
    }

    public function isEnableDisplayOrphanInvestigationsCheckboxFilter(): bool
    {
        return $this->enableDisplayOrphanInvestigationsCheckboxFilter;
    }

    public function setEnableDisplayOrphanInvestigationsCheckboxFilter(bool $enableDisplayOrphanInvestigationsCheckboxFilter): void
    {
        $this->enableDisplayOrphanInvestigationsCheckboxFilter = $enableDisplayOrphanInvestigationsCheckboxFilter;
    }

    public function getSortOrder(): int
    {
        return $this->sortOrder;
    }

    public function setSortOrder(int $sortOrder): void
    {
        $this->sortOrder = $sortOrder;
    }

    public function getCaseDataColumnGroupTabMemberships(): Collection
    {
        return $this->caseDataColumnGroupTabMemberships;
    }
}
